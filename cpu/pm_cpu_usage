#!/bin/bash

[[ "$1" == "-h" ]] && exit 1
# refer to http://www.orczhou.com/index.php/2013/10/how-linux-caculate-cpu-usage-for-process/


cpu_slice ()
{
	head -n 1 /proc/stat | awk '{for(i=2;i<=NF;i++)time+=$i; print time;}'
}

process_slice ()
{
	[ -f /proc/$1/stat ] && awk '{print $14+$15+$16+$17}' /proc/$1/stat
}

p_name=PMAgent
p_pid=$(ps -eL | grep " $p_name$" | awk '{print $2}')
[ -n "$p_pid" ] || { echo "fail to get pid of process $p_name" >&2; exit 1; }

p_name2=BoardMgr
p_pid2=$(ps -eL | grep " $p_name2$" | awk '{print $2}')
[ -n "$p_pid2" ] || { echo "fail to get pid of process $p_name2" >&2; exit 1; }

p_stats_file=$HOME/${p_name}${p_name2}.stat.$$
stat_interval=10

echo "======================= cpu usage statistic (interval = $stat_interval seconds) =======================" | tee -a $p_stats_file
echo "date cpuusage_int  process_time_int cpu_time_int cpu_usage_avg process_time_total cpu_time_total" | tee -a $p_stats_file

count=0
cpu_total=0
process_total=0
while (( count < 10000 )) ; do
	let count++
	cpu_slice_a=$(cpu_slice)
	p_slice_a=$(process_slice $p_pid)
	p_slice_a2=$(process_slice $p_pid2)
	[ -n "$p_slice_a" ] || exit 1
	[ -n "$p_slice_a2" ] || exit 1

	sleep $stat_interval

	cpu_slice_b=$(cpu_slice)
	p_slice_b=$(process_slice $p_pid)
	p_slice_b2=$(process_slice $p_pid2)
	[ -n "$p_slice_b" ] || exit 1
	[ -n "$p_slice_b2" ] || exit 1

	cpu_int=$(( cpu_slice_b - cpu_slice_a ))
	process_int=$(( p_slice_b - p_slice_a + p_slice_b2 - p_slice_a2 ))

	cpu_total=$(( cpu_total + cpu_int ))
	process_total=$(( process_total + process_int ))

	echo "$process_int $cpu_int $process_total $cpu_total" |
	awk -v vdate="$(date)" '
	{
		printf "%s %5.2f%% %4d %4d %5.2f%% %8d %8d\n",
			vdate, $1*100.0/$2, $1, $2, $3*100.0/$4, $3, $4
	}
	' | tee -a $p_stats_file

done

exit 0
