#!/bin/ksh

usage()
{
    echo "restore/merge the checkouts in CO_SAVE_FILE to current view.
The CO_SAVE_FILE MUST be created by 'co-save'. 
The results are saved in /tmp/\$LOGNAME/co-restore/result.diff.

Usage: co-restore <CO_SAVE_FILE>" >&2
    exit 1
}

[[ "$1" == "-h" ]] && usage

WORKSPACE=/tmp/$LOGNAME/co-restore
VERSION_INFO_FILE=checkouts.version
RESULT_FILE=result.diff

usage()
{
	echo "Usage: co-restore <CO_SAVE_FILE>" >&2
	echo "Note: export MR or RESTORE_WITH_CHECKOUT to checkout instead of muckup files" >&2
	exit 1
}

fail()
{
	echo "$*" >&2
	exit 1
}

print_with_green_color()
{
	echo -n $'\e'"[32;1m$*"$'\e'"[0m"
}

print_with_red_color()
{
	echo -n $'\e'"[31;1m$*"$'\e'"[0m"
}

pre_version()
{
	# this function could be replaced by script 'pred'
	[ -f "$1" ] || fail "$1 not exist"

	v=$(cleartool desc -short -pre $1)

	[[ "${v:0:9}" == "/main/tmp" ]] && {
		v=$(cleartool desc $1 | \
		sed -n -e '/muck/ s/  "muck (starting with version \(.*\))"/\1/p')
	}
	[ -n "$v" ] || fail "fail to get version of $1"
	echo -n $v
}

[ -n "$CLEARCASE_ROOT" ] || fail "not in view"

CO_SAVE_FILE=$1
[[ -n "$CO_SAVE_FILE" && -f "$CO_SAVE_FILE" ]] || usage

# validate the files in CO_SAVE_FILE 
tar -tPf $CO_SAVE_FILE $VERSION_INFO_FILE > /dev/null 2>&1 || {
	fail "$VERSION_INFO_FILE not found in $CO_SAVE_FILE"
}

# clean work space
rm -rf $WORKSPACE
mkdir -p $WORKSPACE

# extract checkout files in the CO_SAVE_FILE to workspace
tar -xf $CO_SAVE_FILE -C $WORKSPACE 2>/dev/null || {
	fail "extract $CO_SAVE_FILE fail"
}

# go to work space
cd $WORKSPACE

# read version information from version file
i=0
while read version
do
	versions[i]="$version"
	let i++
done < $VERSION_INFO_FILE

# checkout/muckup checkout files in CO_SAVE_FILE
for version in "${versions[@]}"
do
	file=$(cut -f1 -d" " <<< $version)
	[[ -f "$file" ]] || continue
	[[ -w $file ]] || {
		# do checkout if MR or RESTORE_WITH_CHECKOUT, otherwise muckup
		if [[ -n "$MR" || -n "$RESTORE_WITH_CHECKOUT" ]]
		then
			cleartool co -nc $file || fail "checkout $file fail"
		else
			muckup $file || fail "muckup $file fail"
		fi
	}
done

# merge checkout files in CO_SAVE_FILE to current view
conflicts=0
for version in "${versions[@]}"; do
	file=$(cut -f1 -d" " <<< $version)
	sourceversion=$(cut -f2 -d" " <<< $version)
	sourcebranch=${sourceversion%/*}
	sourcefile=$WORKSPACE$file

	# get current version of file
	destversion=$(pre_version $file)
	destbranch=${destversion%/*}

	[[ -f "$sourcefile" ]] || fail "$sourcefile not found"

	# better in same branch
	#[[ "$sourcebranch" == "$destbranch" ]] || {
	#	echo "WARNING: $file $sourcebranch -> $destbranch"
	#}

	# skip identical file otherwise backup
	if cmp -s $file $sourcefile
	then
		status='NOTCHANGED'
	else
		# merge
		originalfile="$file@@$sourceversion"
		if [[ -f "$originalfile" ]]
		then 
			merge -q $file $originalfile $sourcefile
		else
			echo "$originalfile not found, replace"
			cp $sourcefile $file
		fi
		mstatus=$?

		# compare to the source file
		cmp -s $file $sourcefile
		cstatus=$?

		# determine the merge status
		if [[ $cstatus -eq 0 ]]
		then
			status='REPLACED'
		else
			case $mstatus in
				0) status='MERGED';;
				1) status='CONFILICTS';;
				*) status='TROUBLE';;
			esac
		fi
	fi
	[[ "$status" == "CONFILICTS" ]] && let conflicts++

	if [[ "$status" == 'NOTCHANGED' || \
	      "$status" == 'REPLACED' || \
              "$status" = 'MERGED' ]]
	then
		coloredstatus="$(print_with_green_color $status)"
	else
		coloredstatus="$(print_with_red_color $status)"
	fi
	printf "[ %-21s ] %s\n" $coloredstatus $file 

	# save result
        {
		echo "$file $status $sourceversion -> $destversion"
		echo "========================================================"
		diff $file $file@@$destversion
		echo
        } >> $RESULT_FILE

done

# done
echo
[[ $conflicts -eq 0 ]] || {
	print_with_red_color \
	"WARNING: conflicts found in $conflicts files, please fix them manually"
	echo
}
echo "refer to $WORKSPACE/$RESULT_FILE for results"

