#!/bin/ksh

# This script restores/merges the checkouts in CO_SAVE_FILE to current view.
# The CO_SAVE_FILE MUST be created by 'co-save'. 
# The results are saved in /tmp/$LOGNAME/co-restore/result.diff.
# Usage: co-restore <CO_SAVE_FILE>

WORKSPACE=/tmp/$LOGNAME/co-restore
VERSION_INFO_FILE=checkouts.version
RESULT_FILE=result.diff

usage()
{
	echo "Usage: co-restore <CO_SAVE_FILE>" >&2
	exit 1
}

fail()
{
	echo "$*" >&2
	exit 1
}

get_version()
{
	[ -f "$1" ] || fail "$1 not exist"

	v=$(cleartool desc -short -pre $1)

	[[ "${v:0:9}" == "/main/tmp" ]] && {
		v=$(cleartool desc $1 | \
		sed -n -e '/muck/ s/  "muck (starting with version \(.*\))"/\1/p')
	}
	[ -n "$v" ] || fail "fail to get version of $1"
	echo $v
}

[ -n "$CLEARCASE_ROOT" ] || fail "not in view"

CO_SAVE_FILE=$1
[[ -n "$CO_SAVE_FILE" && -f "$CO_SAVE_FILE" ]] || usage

# validate the files in CO_SAVE_FILE 
tar -tf $CO_SAVE_FILE $VERSION_INFO_FILE > /dev/null 2>&1 || {
	fail "$VERSION_INFO_FILE not found in $CO_SAVE_FILE"
}

# clean work space
rm -rf $WORKSPACE
mkdir -p $WORKSPACE

# extract checkout files in the CO_SAVE_FILE to workspace
tar -xf $CO_SAVE_FILE -C $WORKSPACE 2>/dev/null || {
	fail "extract $CO_SAVE_FILE fail"
}

# go to work space
cd $WORKSPACE

# read version information from version file
i=0
while read version
do
	versions[i]="$version"
	let i++
done < $VERSION_INFO_FILE

# checkout/muckup checkout files in CO_SAVE_FILE
for version in "${versions[@]}"
do
	file=$(cut -f1 -d" " <<< $version)
	[ -f "$file" ] || continue
	if [ -w $file ]
	then
		# backup current checked-out content
		echo "backup $file to $file.keep"
		cp $file $file.keep
	else
		# do checkout if MR exported; otherwise muckup
		if [ -n "$MR" ]
		then
			cleartool co -nc $file || fail "checkout $file fail"
		else
			muckup $file || fail "muckup $file fail"
		fi
	fi
done

# merge checkout files in CO_SAVE_FILE to current view
ret=0
for version in "${versions[@]}"; do
	file=$(cut -f1 -d" " <<< $version)
	sourceversion=$(cut -f2 -d" " <<< $version)
	sourcebranch=${sourceversion%/*}
	sourcefile=$WORKSPACE$file

	# get current version of file
	destversion=$(get_version $file)
	destbranch=${destversion%/*}

	[[ -f "$sourcefile" ]] || fail "$sourcefile not found"

	# better in same branch
	[[ "$sourcebranch" == "$destbranch" ]] || {
		echo "WARNING: $file $sourcebranch -> $destbranch"
	}

	# merge
	originalfile="$file@@$sourceversion"
	if [[ -f "$originalfile" ]]
	then 
		merge -q $file $originalfile $sourcefile
	else
		echo "$originalfile not found, replace"
		cp $sourcefile $file
	fi
	mstatus=$?

	# compare to the source file
	cmp -s $file $sourcefile
	cstatus=$?

	# determine the merge status
	if [ $cstatus -eq 0 ]
	then
		status='REPLACED'
	else
		case $mstatus in
			0) status='MERGED';;
			1) status='CONFILICTS';;
			*) status='TROUBLE';;
		esac
	fi
	if [ "$status" = 'REPLACED' -o "$status" = 'MERGED' ]
	then
		# green color indicating PASS
		colorstatus=$'\e'"[32;1m$status"$'\e'"[0m"
	else
                ret=1
		# red color indicating CONFLICTS
		colorstatus=$'\e'"[31;1m$status"$'\e'"[0m"
	fi
	printf "[ %-21s ] %s\n" $colorstatus $file 

	# save result
        {
		echo "$file $status $sourceversion -> $destversion"
		echo "========================================================"
		diff $file $file@@$destversion
		echo
        } >> $RESULT_FILE

done

# done
echo
[[ $ret -eq 0 ]] || echo 'conflicts need to be fixed manually'
echo "refer to $WORKSPACE/$RESULT_FILE for restore results"

